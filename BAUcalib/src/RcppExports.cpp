// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// cov_mat
arma::mat cov_mat(arma::mat A, arma::mat B, arma::mat D, arma::umat H);
RcppExport SEXP _BAUcalib_cov_mat(SEXP ASEXP, SEXP BSEXP, SEXP DSEXP, SEXP HSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type D(DSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type H(HSEXP);
    rcpp_result_gen = Rcpp::wrap(cov_mat(A, B, D, H));
    return rcpp_result_gen;
END_RCPP
}
// model_run
DataFrame model_run(NumericVector yr, double P0, NumericVector psi, double alpha, double A0, double As, double s, double lambda, double delta, double pi, double kappa, NumericMatrix gamma, NumericVector rho);
RcppExport SEXP _BAUcalib_model_run(SEXP yrSEXP, SEXP P0SEXP, SEXP psiSEXP, SEXP alphaSEXP, SEXP A0SEXP, SEXP AsSEXP, SEXP sSEXP, SEXP lambdaSEXP, SEXP deltaSEXP, SEXP piSEXP, SEXP kappaSEXP, SEXP gammaSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type yr(yrSEXP);
    Rcpp::traits::input_parameter< double >::type P0(P0SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type A0(A0SEXP);
    Rcpp::traits::input_parameter< double >::type As(AsSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< double >::type pi(piSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(model_run(yr, P0, psi, alpha, A0, As, s, lambda, delta, pi, kappa, gamma, rho));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _BAUcalib_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _BAUcalib_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _BAUcalib_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _BAUcalib_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BAUcalib_cov_mat", (DL_FUNC) &_BAUcalib_cov_mat, 4},
    {"_BAUcalib_model_run", (DL_FUNC) &_BAUcalib_model_run, 13},
    {"_BAUcalib_rcpparma_hello_world", (DL_FUNC) &_BAUcalib_rcpparma_hello_world, 0},
    {"_BAUcalib_rcpparma_outerproduct", (DL_FUNC) &_BAUcalib_rcpparma_outerproduct, 1},
    {"_BAUcalib_rcpparma_innerproduct", (DL_FUNC) &_BAUcalib_rcpparma_innerproduct, 1},
    {"_BAUcalib_rcpparma_bothproducts", (DL_FUNC) &_BAUcalib_rcpparma_bothproducts, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_BAUcalib(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}

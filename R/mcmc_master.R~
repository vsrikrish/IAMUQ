library(readxl)
library(DEoptim)
library(parallel)

source('R/model.R')
source('R/likelihood.R')

# read in PBS job array index to specify type
types <- c('iid', 'ar')
aid <- Sys.getenv('PBS_ARRAYID')
# if PBS_ARRAYID doesn't exist, this should be passed as a command line argument
if (aid == '') {
   args <- commandArgs(trailingOnly=TRUE)
   type <- args[1]
} else {
  type <- types[as.numeric(aid)]
}

all_parnames <- c('psi1', 'psi2', 'psi3', 'P0', 'lambda', 's', 'delta', 'alpha', 'As', 'pi', 'A0', 'rho2', 'rho3', 'tau2', 'tau3', 'tau4', 'kappa', 'sigma_pop', 'sigma_prod', 'sigma_emis', 'a_pop', 'a_prod', 'a_emis', 'eta_pop', 'eta_prod', 'eta_emis')

# set parameter name subset
if (type == 'ar') {
  parnames <- c('psi1', 'psi2', 'psi3', 'P0', 'lambda', 's', 'delta', 'alpha', 'As', 'pi', 'A0', 'rho2', 'rho3', 'tau2', 'tau3', 'tau4', 'kappa', 'a_pop', 'a_prod', 'a_emis', 'eta_pop', 'eta_prod', 'eta_emis')
} else if (type == 'iid') {
  parnames <- c('psi1', 'psi2', 'psi3', 'P0', 'lambda', 's', 'delta', 'alpha', 'As', 'pi', 'A0', 'rho2', 'rho3', 'tau2', 'tau3', 'tau4', 'kappa', 'sigma_pop', 'sigma_prod', 'sigma_emis')
}

xl_file <- 'data/mpd2018.xlsx'
# read in per capita historical GDP (in 2011US$)
# we use cgadppc instead of rgdpnapc as we are interested in global GDP
cgdppc_dat <- read_excel(xl_file, sheet = 3, skip = 1)
# read in population (in thousands)
pop_dat <- read_excel(xl_file, sheet = 5, skip = 1)
# sum up world population figures in billions
po_dat <- data.frame(year=pop_dat[, 1], pop = rowSums(pop_dat[ ,-1], na.rm = TRUE) / 1e6)
# estimate global GDP for each year (in trillions 2011US$)
pr_dat <- data.frame(year=pop_dat[, 1], prod=rowSums(pop_dat[, -1] * cgdppc_dat[, -1], na.rm = TRUE) / 1e9)

# subset data based on valid years for the pop/GDP data
# we dont really trust anything before 1820, but 1nclude 1700 as a baseline
valid_yr <- 1820:2017
po_dat <- po_dat[po_dat$year %in% valid_yr, ]
pr_dat <- pr_dat[pr_dat$year %in% valid_yr, ]

# read in global emissions data (in Gt CO2)
em_dat <- read.table('data/global.1751_2014.ems', skip = 35, colClasses = c(rep('numeric', 2), rep('NULL', 6)), fill = TRUE)
em_dat[, 2] <- em_dat[, 2]/1000
colnames(em_dat) <- c('year', 'emissions')

dat <- list(pop=po_dat, prod=pr_dat, emissions=em_dat)

# estimate maximum-likelihood parameter values
# start cluster
print('Starting cluster...)
ncores <- detectCores()
print(ncores)
cl <- makeCluster(ncores)
lbound <- c(0.0001, 0, 6.9, 0.3, 0.5, 0.1, 0.01, 0.0007, 5.3, 0.4, 0, 0, 0, 1700, 1700, 2010, 0.005, 0, 0, 0, 0.85, 0.85, 0.85, 0, 0, 0)
ubound <- c(0.15, 100, 15, 1, 0.9,  0.3, 0.14, 0.0212, 16.11, 0.7, 3, 0.5, 0.5, 2100, 2100, 2500, 0.2, 100, 100, 100, 1, 1, 1, 0.1, 0.1, 0.1)
mle <- DEoptim(neg_log_lik, lbound[match(parnames, all_parnames)], ubound[match(parnames, all_parnames)], control=list(NP=60, itermax=5000, F=0.75, CR=0.95, parallelType=1, cluster=cl, parVar=c('parnames', 'dat', 'update_pop', 'update_prod', 'update_emis', 'mod', paste0('log_lik_', type))), parnames=parnames, dat=dat, lik_fun=paste0('log_lik_', type))
stopCluster(cl)
print('Stopping cluster...)

model_out <- list()
model_out[['bestfit']] <- mod(mle$optim$bestmem, parnames)
model_out[['mle']] <- mle
model_out[['dat']] <- dat
model_out[['parnames']] <- parnames
model_out[['type']] <- type

saveRDS(model_out, file.path('output', paste('temp-', type, '.rds', sep='')))

source(file.path('R', paste('plot_', type, '_residuals.R', sep='')))
